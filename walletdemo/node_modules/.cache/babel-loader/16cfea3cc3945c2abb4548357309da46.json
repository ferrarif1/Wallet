{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\") && isHexString(value.data)) {\n    return {\n      message: value.message,\n      data: value.data\n    };\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunk(value[key]);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value));\n    } catch (error) {}\n  }\n  return null;\n}\nfunction checkError(method, error, params) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\") {\n    const result = spelunk(error);\n    if (result) {\n      return result.data;\n    }\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      error,\n      data: \"0x\"\n    });\n  }\n  // @TODO: Should we spelunk for message too?\n  let message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n  message = (message || \"\").toLowerCase();\n  const transaction = params.transaction || params.signedTransaction;\n  // \"insufficient funds for gas * price + value + cost(data)\"\n  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"nonce too low\"\n  if (message.match(/nonce (is )?too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/replacement transaction underpriced/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/only replay-protected/)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error,\n      method,\n      transaction\n    });\n  }\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n  throw error;\n}\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n  return payload.result;\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    logger.checkNew(new.target, JsonRpcSigner);\n    super();\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n    defineReadOnly(this, \"provider\", provider);\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n      return address;\n    });\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n    if (transaction.to != null) {\n      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {\n        if (to == null) {\n          return null;\n        }\n        const address = yield this.provider.resolveName(to);\n        if (address == null) {\n          logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n        }\n        return address;\n      }));\n    }\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(_ref => {\n      let {\n        tx,\n        sender\n      } = _ref;\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // This cannot be mined any earlier than any recent block\n      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n      // Send the transaction\n      const hash = yield this.sendUncheckedTransaction(transaction);\n      try {\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n          const tx = yield this.provider.getTransaction(hash);\n          if (tx === null) {\n            return undefined;\n          }\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        }), {\n          oncePoll: this.provider\n        });\n      } catch (error) {\n        error.transactionHash = hash;\n        throw error;\n      }\n    });\n  }\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n    });\n  }\n  _legacySignMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n      return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n    });\n  }\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n      return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n    });\n  }\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n}\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    logger.checkNew(new.target, JsonRpcProvider);\n    let networkOrReady = network;\n    // The network is unknown, query the JSON-RPC for it\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n    super(networkOrReady);\n    // Default URL\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n    this._nextId = 42;\n  }\n  get _cache() {\n    if (this._eventLoopCache == null) {\n      this._eventLoopCache = {};\n    }\n    return this._eventLoopCache;\n  }\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n  detectNetwork() {\n    if (!this._cache[\"detectNetwork\"]) {\n      this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n      // Clear this cache at the beginning of the next event loop\n      setTimeout(() => {\n        this._cache[\"detectNetwork\"] = null;\n      }, 0);\n    }\n    return this._cache[\"detectNetwork\"];\n  }\n  _uncachedDetectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    });\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    });\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        this._cache[method] = null;\n      }, 0);\n    }\n    return result;\n  }\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n        return null;\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n        return [\"eth_getLogs\", [params.filter]];\n      default:\n        break;\n    }\n    return null;\n  }\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Legacy networks do not like the type field being passed along (which\n      // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n      if (method === \"call\" || method === \"estimateGas\") {\n        const tx = params.transaction;\n        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n          // If there are no EIP-1559 properties, it might be non-EIP-a559\n          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n            const feeData = yield this.getFeeData();\n            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n              // Network doesn't know about EIP-1559 (and hence type)\n              params = shallowCopy(params);\n              params.transaction = shallowCopy(tx);\n              delete params.transaction.type;\n            }\n          }\n        }\n      }\n      const args = this.prepareRequest(method, params);\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n    super._startEvent(event);\n  }\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n    super._stopEvent(event);\n  }\n  // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n    checkProperties(transaction, allowed);\n    const result = {};\n    // JSON-RPC now requires numeric values to be \"quantity\" values\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n      const value = hexValue(transaction[key]);\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n      result[key] = hexlify(transaction[key]);\n    });\n    if (transaction.accessList) {\n      result[\"accessList\"] = accessListify(transaction.accessList);\n    }\n    return result;\n  }\n}","map":{"version":3,"mappings":"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","names":["Signer","BigNumber","hexlify","hexValue","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","value","message","match","data","key","result","JSON","parse","error","checkError","method","params","throwError","errors","CALL_EXCEPTION","code","SERVER_ERROR","body","responseText","toLowerCase","transaction","signedTransaction","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","UNPREDICTABLE_GAS_LIMIT","timer","timeout","Promise","resolve","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructor","constructorGuard","provider","addressOrIndex","checkNew","new","target","formatter","address","throwArgumentError","connect","operation","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","getAddress","send","then","accounts","length","sendUncheckedTransaction","fromAddress","gasLimit","estimate","from","estimateGas","to","__awaiter","resolveName","tx","sender","hexTx","hexlifyTransaction","hash","signTransaction","sendTransaction","blockNumber","_getInternalBlockNumber","pollingInterval","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","signMessage","_legacySignMessage","_signTypedData","domain","types","populated","resolveNames","name","stringify","getPayload","unlock","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","reject","detectNetwork","Object","freeze","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","getUncheckedSigner","listAccounts","map","a","request","id","jsonrpc","emit","action","cache","connection","response","prepareRequest","blockTag","position","includeTransactions","blockHash","filter","perform","isZero","feeData","getFeeData","args","NOT_IMPLEMENTED","_startEvent","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","_stopEvent","listenerCount","allowExtra","allowed"],"sources":["/Users/zhangyuanyi/Downloads/Wallet/walletdemo/node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any): null | { message: string, data: string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\") && isHexString(value.data)) {\n        return { message: value.message, data: value.data };\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key]);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value));\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error);\n        if (result) { return result.data; }\n\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            error, data: \"0x\"\n        });\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        logger.checkNew(new.target, JsonRpcSigner);\n\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            address.toLowerCase(),\n            JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        logger.checkNew(new.target, JsonRpcProvider);\n\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), params.position, params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue((<any>transaction)[key]);\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}