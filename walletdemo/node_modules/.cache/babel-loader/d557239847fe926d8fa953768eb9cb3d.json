{"ast":null,"code":"import { utils as ethersUtils, Wallet } from 'ethers';\nimport { stripHexPrefix } from 'ethereumjs-util';\nvar MIN_ENTROPY_SIZE = 128;\nvar keccak256 = ethersUtils.keccak256;\n/**\n * create a privateKey from the given entropy or a new one\n * @param  {Buffer} entropy\n * @return {string}\n */\n\nexport function createPrivateKey(entropy) {\n  if (entropy) {\n    if (!Buffer.isBuffer(entropy)) throw new Error('EthCrypto.createPrivateKey(): given entropy is no Buffer');\n    if (Buffer.byteLength(entropy, 'utf8') < MIN_ENTROPY_SIZE) throw new Error('EthCrypto.createPrivateKey(): Entropy-size must be at least ' + MIN_ENTROPY_SIZE);\n    var outerHex = keccak256(entropy);\n    return outerHex;\n  } else {\n    var innerHex = keccak256(ethersUtils.concat([ethersUtils.randomBytes(32), ethersUtils.randomBytes(32)]));\n    var middleHex = ethersUtils.concat([ethersUtils.concat([ethersUtils.randomBytes(32), innerHex]), ethersUtils.randomBytes(32)]);\n    var _outerHex = keccak256(middleHex);\n    return _outerHex;\n  }\n}\n/**\n * creates a new object with\n * private-, public-Key and address\n * @param {Buffer?} entropy if provided, will use that as single random-source\n */\n\nexport default function createIdentity(entropy) {\n  var privateKey = createPrivateKey(entropy);\n  var wallet = new Wallet(privateKey);\n  var identity = {\n    privateKey: privateKey,\n    // remove trailing '0x04'\n    publicKey: stripHexPrefix(wallet.publicKey).slice(2),\n    address: wallet.address\n  };\n  return identity;\n}","map":{"version":3,"names":["utils","ethersUtils","Wallet","stripHexPrefix","MIN_ENTROPY_SIZE","keccak256","createPrivateKey","entropy","Buffer","isBuffer","Error","byteLength","outerHex","innerHex","concat","randomBytes","middleHex","_outerHex","createIdentity","privateKey","wallet","identity","publicKey","slice","address"],"sources":["/Users/zhangyuanyi/Downloads/Wallet/walletdemo/node_modules/eth-crypto/dist/es/create-identity.js"],"sourcesContent":["import { utils as ethersUtils, Wallet } from 'ethers';\nimport { stripHexPrefix } from 'ethereumjs-util';\nvar MIN_ENTROPY_SIZE = 128;\nvar keccak256 = ethersUtils.keccak256;\n/**\n * create a privateKey from the given entropy or a new one\n * @param  {Buffer} entropy\n * @return {string}\n */\n\nexport function createPrivateKey(entropy) {\n  if (entropy) {\n    if (!Buffer.isBuffer(entropy)) throw new Error('EthCrypto.createPrivateKey(): given entropy is no Buffer');\n    if (Buffer.byteLength(entropy, 'utf8') < MIN_ENTROPY_SIZE) throw new Error('EthCrypto.createPrivateKey(): Entropy-size must be at least ' + MIN_ENTROPY_SIZE);\n    var outerHex = keccak256(entropy);\n    return outerHex;\n  } else {\n    var innerHex = keccak256(ethersUtils.concat([ethersUtils.randomBytes(32), ethersUtils.randomBytes(32)]));\n    var middleHex = ethersUtils.concat([ethersUtils.concat([ethersUtils.randomBytes(32), innerHex]), ethersUtils.randomBytes(32)]);\n\n    var _outerHex = keccak256(middleHex);\n\n    return _outerHex;\n  }\n}\n/**\n * creates a new object with\n * private-, public-Key and address\n * @param {Buffer?} entropy if provided, will use that as single random-source\n */\n\nexport default function createIdentity(entropy) {\n  var privateKey = createPrivateKey(entropy);\n  var wallet = new Wallet(privateKey);\n  var identity = {\n    privateKey: privateKey,\n    // remove trailing '0x04'\n    publicKey: stripHexPrefix(wallet.publicKey).slice(2),\n    address: wallet.address\n  };\n  return identity;\n}"],"mappings":"AAAA,SAASA,KAAK,IAAIC,WAAW,EAAEC,MAAM,QAAQ,QAAQ;AACrD,SAASC,cAAc,QAAQ,iBAAiB;AAChD,IAAIC,gBAAgB,GAAG,GAAG;AAC1B,IAAIC,SAAS,GAAGJ,WAAW,CAACI,SAAS;AACrC;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAgB,CAACC,OAAO,EAAE;EACxC,IAAIA,OAAO,EAAE;IACX,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACF,OAAO,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,0DAA0D,CAAC;IAC1G,IAAIF,MAAM,CAACG,UAAU,CAACJ,OAAO,EAAE,MAAM,CAAC,GAAGH,gBAAgB,EAAE,MAAM,IAAIM,KAAK,CAAC,8DAA8D,GAAGN,gBAAgB,CAAC;IAC7J,IAAIQ,QAAQ,GAAGP,SAAS,CAACE,OAAO,CAAC;IACjC,OAAOK,QAAQ;EACjB,CAAC,MAAM;IACL,IAAIC,QAAQ,GAAGR,SAAS,CAACJ,WAAW,CAACa,MAAM,CAAC,CAACb,WAAW,CAACc,WAAW,CAAC,EAAE,CAAC,EAAEd,WAAW,CAACc,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxG,IAAIC,SAAS,GAAGf,WAAW,CAACa,MAAM,CAAC,CAACb,WAAW,CAACa,MAAM,CAAC,CAACb,WAAW,CAACc,WAAW,CAAC,EAAE,CAAC,EAAEF,QAAQ,CAAC,CAAC,EAAEZ,WAAW,CAACc,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IAE9H,IAAIE,SAAS,GAAGZ,SAAS,CAACW,SAAS,CAAC;IAEpC,OAAOC,SAAS;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,cAAc,CAACX,OAAO,EAAE;EAC9C,IAAIY,UAAU,GAAGb,gBAAgB,CAACC,OAAO,CAAC;EAC1C,IAAIa,MAAM,GAAG,IAAIlB,MAAM,CAACiB,UAAU,CAAC;EACnC,IAAIE,QAAQ,GAAG;IACbF,UAAU,EAAEA,UAAU;IACtB;IACAG,SAAS,EAAEnB,cAAc,CAACiB,MAAM,CAACE,SAAS,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;IACpDC,OAAO,EAAEJ,MAAM,CAACI;EAClB,CAAC;EACD,OAAOH,QAAQ;AACjB"},"metadata":{},"sourceType":"module"}