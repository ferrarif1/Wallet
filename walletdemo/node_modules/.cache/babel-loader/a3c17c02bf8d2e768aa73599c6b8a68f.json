{"ast":null,"code":"import { compress, decompress } from './public-key';\nexport function stringify(cipher) {\n  if (typeof cipher === 'string') return cipher; // use compressed key because it's smaller\n\n  var compressedKey = compress(cipher.ephemPublicKey);\n  var ret = Buffer.concat([Buffer.from(cipher.iv, 'hex'),\n  // 16bit\n  Buffer.from(compressedKey, 'hex'),\n  // 33bit\n  Buffer.from(cipher.mac, 'hex'),\n  // 32bit\n  Buffer.from(cipher.ciphertext, 'hex') // var bit\n  ]);\n\n  return ret.toString('hex');\n}\nexport function parse(str) {\n  if (typeof str !== 'string') return str;\n  var buf = Buffer.from(str, 'hex');\n  var ret = {\n    iv: buf.toString('hex', 0, 16),\n    ephemPublicKey: buf.toString('hex', 16, 49),\n    mac: buf.toString('hex', 49, 81),\n    ciphertext: buf.toString('hex', 81, buf.length)\n  }; // decompress publicKey\n\n  ret.ephemPublicKey = '04' + decompress(ret.ephemPublicKey);\n  return ret;\n}","map":{"version":3,"names":["compress","decompress","stringify","cipher","compressedKey","ephemPublicKey","ret","Buffer","concat","from","iv","mac","ciphertext","toString","parse","str","buf","length"],"sources":["/Users/zhangyuanyi/Downloads/Wallet/walletdemo/node_modules/eth-crypto/dist/es/cipher.js"],"sourcesContent":["import { compress, decompress } from './public-key';\nexport function stringify(cipher) {\n  if (typeof cipher === 'string') return cipher; // use compressed key because it's smaller\n\n  var compressedKey = compress(cipher.ephemPublicKey);\n  var ret = Buffer.concat([Buffer.from(cipher.iv, 'hex'), // 16bit\n  Buffer.from(compressedKey, 'hex'), // 33bit\n  Buffer.from(cipher.mac, 'hex'), // 32bit\n  Buffer.from(cipher.ciphertext, 'hex') // var bit\n  ]);\n  return ret.toString('hex');\n}\nexport function parse(str) {\n  if (typeof str !== 'string') return str;\n  var buf = Buffer.from(str, 'hex');\n  var ret = {\n    iv: buf.toString('hex', 0, 16),\n    ephemPublicKey: buf.toString('hex', 16, 49),\n    mac: buf.toString('hex', 49, 81),\n    ciphertext: buf.toString('hex', 81, buf.length)\n  }; // decompress publicKey\n\n  ret.ephemPublicKey = '04' + decompress(ret.ephemPublicKey);\n  return ret;\n}"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,UAAU,QAAQ,cAAc;AACnD,OAAO,SAASC,SAAS,CAACC,MAAM,EAAE;EAChC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE,OAAOA,MAAM,CAAC,CAAC;;EAE/C,IAAIC,aAAa,GAAGJ,QAAQ,CAACG,MAAM,CAACE,cAAc,CAAC;EACnD,IAAIC,GAAG,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACD,MAAM,CAACE,IAAI,CAACN,MAAM,CAACO,EAAE,EAAE,KAAK,CAAC;EAAE;EACxDH,MAAM,CAACE,IAAI,CAACL,aAAa,EAAE,KAAK,CAAC;EAAE;EACnCG,MAAM,CAACE,IAAI,CAACN,MAAM,CAACQ,GAAG,EAAE,KAAK,CAAC;EAAE;EAChCJ,MAAM,CAACE,IAAI,CAACN,MAAM,CAACS,UAAU,EAAE,KAAK,CAAC,CAAC;EAAA,CACrC,CAAC;;EACF,OAAON,GAAG,CAACO,QAAQ,CAAC,KAAK,CAAC;AAC5B;AACA,OAAO,SAASC,KAAK,CAACC,GAAG,EAAE;EACzB,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAOA,GAAG;EACvC,IAAIC,GAAG,GAAGT,MAAM,CAACE,IAAI,CAACM,GAAG,EAAE,KAAK,CAAC;EACjC,IAAIT,GAAG,GAAG;IACRI,EAAE,EAAEM,GAAG,CAACH,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;IAC9BR,cAAc,EAAEW,GAAG,CAACH,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;IAC3CF,GAAG,EAAEK,GAAG,CAACH,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;IAChCD,UAAU,EAAEI,GAAG,CAACH,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAEG,GAAG,CAACC,MAAM;EAChD,CAAC,CAAC,CAAC;;EAEHX,GAAG,CAACD,cAAc,GAAG,IAAI,GAAGJ,UAAU,CAACK,GAAG,CAACD,cAAc,CAAC;EAC1D,OAAOC,GAAG;AACZ"},"metadata":{},"sourceType":"module"}