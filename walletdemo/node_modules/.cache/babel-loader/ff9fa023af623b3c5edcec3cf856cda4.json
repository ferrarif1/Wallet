{"ast":null,"code":"import { Transaction } from '@ethereumjs/tx';\nimport publicKeyByPrivateKey from './public-key-by-private-key';\nimport { toAddress as addressByPublicKey } from './public-key';\nexport default function signTransaction(rawTx, privateKey) {\n  var txOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // check if privateKey->address matches rawTx.from\n  var publicKey = publicKeyByPrivateKey(privateKey);\n  var address = addressByPublicKey(publicKey);\n  if (address != rawTx.from) throw new Error('EthCrypto.signTransaction(): rawTx.from does not match the address of the privateKey');\n  var privateKeyBuffer = Buffer.from(privateKey.replace(/^.{2}/g, ''), 'hex');\n  var tx = Transaction.fromTxData(rawTx, txOptions);\n  var signedTx = tx.sign(privateKeyBuffer);\n  var serializedTx = signedTx.serialize().toString('hex');\n  return serializedTx;\n}","map":{"version":3,"names":["Transaction","publicKeyByPrivateKey","toAddress","addressByPublicKey","signTransaction","rawTx","privateKey","txOptions","arguments","length","undefined","publicKey","address","from","Error","privateKeyBuffer","Buffer","replace","tx","fromTxData","signedTx","sign","serializedTx","serialize","toString"],"sources":["/Users/zhangyuanyi/Downloads/Wallet/walletdemo/node_modules/eth-crypto/dist/es/sign-transaction.js"],"sourcesContent":["import { Transaction } from '@ethereumjs/tx';\nimport publicKeyByPrivateKey from './public-key-by-private-key';\nimport { toAddress as addressByPublicKey } from './public-key';\nexport default function signTransaction(rawTx, privateKey) {\n  var txOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // check if privateKey->address matches rawTx.from\n  var publicKey = publicKeyByPrivateKey(privateKey);\n  var address = addressByPublicKey(publicKey);\n  if (address != rawTx.from) throw new Error('EthCrypto.signTransaction(): rawTx.from does not match the address of the privateKey');\n  var privateKeyBuffer = Buffer.from(privateKey.replace(/^.{2}/g, ''), 'hex');\n  var tx = Transaction.fromTxData(rawTx, txOptions);\n  var signedTx = tx.sign(privateKeyBuffer);\n  var serializedTx = signedTx.serialize().toString('hex');\n  return serializedTx;\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,qBAAqB,MAAM,6BAA6B;AAC/D,SAASC,SAAS,IAAIC,kBAAkB,QAAQ,cAAc;AAC9D,eAAe,SAASC,eAAe,CAACC,KAAK,EAAEC,UAAU,EAAE;EACzD,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACtF;EACA,IAAIG,SAAS,GAAGV,qBAAqB,CAACK,UAAU,CAAC;EACjD,IAAIM,OAAO,GAAGT,kBAAkB,CAACQ,SAAS,CAAC;EAC3C,IAAIC,OAAO,IAAIP,KAAK,CAACQ,IAAI,EAAE,MAAM,IAAIC,KAAK,CAAC,sFAAsF,CAAC;EAClI,IAAIC,gBAAgB,GAAGC,MAAM,CAACH,IAAI,CAACP,UAAU,CAACW,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC;EAC3E,IAAIC,EAAE,GAAGlB,WAAW,CAACmB,UAAU,CAACd,KAAK,EAAEE,SAAS,CAAC;EACjD,IAAIa,QAAQ,GAAGF,EAAE,CAACG,IAAI,CAACN,gBAAgB,CAAC;EACxC,IAAIO,YAAY,GAAGF,QAAQ,CAACG,SAAS,EAAE,CAACC,QAAQ,CAAC,KAAK,CAAC;EACvD,OAAOF,YAAY;AACrB"},"metadata":{},"sourceType":"module"}