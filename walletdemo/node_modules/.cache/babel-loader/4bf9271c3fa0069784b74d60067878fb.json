{"ast":null,"code":"import { publicKeyConvert } from 'secp256k1';\nimport { pubToAddress, toChecksumAddress, toBuffer } from 'ethereumjs-util';\nimport { hexToUnit8Array, uint8ArrayToHex, addLeading0x } from './util';\nexport function compress(startsWith04) {\n  // add trailing 04 if not done before\n  var testBuffer = Buffer.from(startsWith04, 'hex');\n  if (testBuffer.length === 64) startsWith04 = '04' + startsWith04;\n  return uint8ArrayToHex(publicKeyConvert(hexToUnit8Array(startsWith04), true));\n}\nexport function decompress(startsWith02Or03) {\n  // if already decompressed an not has trailing 04\n  var testBuffer = Buffer.from(startsWith02Or03, 'hex');\n  if (testBuffer.length === 64) startsWith02Or03 = '04' + startsWith02Or03;\n  var decompressed = uint8ArrayToHex(publicKeyConvert(hexToUnit8Array(startsWith02Or03), false)); // remove trailing 04\n\n  decompressed = decompressed.substring(2);\n  return decompressed;\n}\n/**\n * generates the ethereum-adress of the publicKey\n * We create the checksum-adress which is case-sensitive\n * @returns {string} address\n */\n\nexport function toAddress(publicKey) {\n  // normalize key\n  publicKey = decompress(publicKey);\n  var addressBuffer = pubToAddress(toBuffer(addLeading0x(publicKey)));\n  var checkSumAdress = toChecksumAddress(addLeading0x(addressBuffer.toString('hex')));\n  return checkSumAdress;\n}","map":{"version":3,"names":["publicKeyConvert","pubToAddress","toChecksumAddress","toBuffer","hexToUnit8Array","uint8ArrayToHex","addLeading0x","compress","startsWith04","testBuffer","Buffer","from","length","decompress","startsWith02Or03","decompressed","substring","toAddress","publicKey","addressBuffer","checkSumAdress","toString"],"sources":["/Users/zhangyuanyi/Downloads/Wallet/walletdemo/node_modules/eth-crypto/dist/es/public-key.js"],"sourcesContent":["import { publicKeyConvert } from 'secp256k1';\nimport { pubToAddress, toChecksumAddress, toBuffer } from 'ethereumjs-util';\nimport { hexToUnit8Array, uint8ArrayToHex, addLeading0x } from './util';\nexport function compress(startsWith04) {\n  // add trailing 04 if not done before\n  var testBuffer = Buffer.from(startsWith04, 'hex');\n  if (testBuffer.length === 64) startsWith04 = '04' + startsWith04;\n  return uint8ArrayToHex(publicKeyConvert(hexToUnit8Array(startsWith04), true));\n}\nexport function decompress(startsWith02Or03) {\n  // if already decompressed an not has trailing 04\n  var testBuffer = Buffer.from(startsWith02Or03, 'hex');\n  if (testBuffer.length === 64) startsWith02Or03 = '04' + startsWith02Or03;\n  var decompressed = uint8ArrayToHex(publicKeyConvert(hexToUnit8Array(startsWith02Or03), false)); // remove trailing 04\n\n  decompressed = decompressed.substring(2);\n  return decompressed;\n}\n/**\n * generates the ethereum-adress of the publicKey\n * We create the checksum-adress which is case-sensitive\n * @returns {string} address\n */\n\nexport function toAddress(publicKey) {\n  // normalize key\n  publicKey = decompress(publicKey);\n  var addressBuffer = pubToAddress(toBuffer(addLeading0x(publicKey)));\n  var checkSumAdress = toChecksumAddress(addLeading0x(addressBuffer.toString('hex')));\n  return checkSumAdress;\n}"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,WAAW;AAC5C,SAASC,YAAY,EAAEC,iBAAiB,EAAEC,QAAQ,QAAQ,iBAAiB;AAC3E,SAASC,eAAe,EAAEC,eAAe,EAAEC,YAAY,QAAQ,QAAQ;AACvE,OAAO,SAASC,QAAQ,CAACC,YAAY,EAAE;EACrC;EACA,IAAIC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACH,YAAY,EAAE,KAAK,CAAC;EACjD,IAAIC,UAAU,CAACG,MAAM,KAAK,EAAE,EAAEJ,YAAY,GAAG,IAAI,GAAGA,YAAY;EAChE,OAAOH,eAAe,CAACL,gBAAgB,CAACI,eAAe,CAACI,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;AAC/E;AACA,OAAO,SAASK,UAAU,CAACC,gBAAgB,EAAE;EAC3C;EACA,IAAIL,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACG,gBAAgB,EAAE,KAAK,CAAC;EACrD,IAAIL,UAAU,CAACG,MAAM,KAAK,EAAE,EAAEE,gBAAgB,GAAG,IAAI,GAAGA,gBAAgB;EACxE,IAAIC,YAAY,GAAGV,eAAe,CAACL,gBAAgB,CAACI,eAAe,CAACU,gBAAgB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEhGC,YAAY,GAAGA,YAAY,CAACC,SAAS,CAAC,CAAC,CAAC;EACxC,OAAOD,YAAY;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,SAAS,CAACC,SAAS,EAAE;EACnC;EACAA,SAAS,GAAGL,UAAU,CAACK,SAAS,CAAC;EACjC,IAAIC,aAAa,GAAGlB,YAAY,CAACE,QAAQ,CAACG,YAAY,CAACY,SAAS,CAAC,CAAC,CAAC;EACnE,IAAIE,cAAc,GAAGlB,iBAAiB,CAACI,YAAY,CAACa,aAAa,CAACE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnF,OAAOD,cAAc;AACvB"},"metadata":{},"sourceType":"module"}