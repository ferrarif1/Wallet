{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ripemd160_1 = require(\"../ripemd160\");\nvar sha256_1 = require(\"../sha256\");\nexports.createHmac = require(\"create-hmac\");\nexports.randomBytes = require(\"randombytes\");\nvar Hash = /** @class */function () {\n  function Hash(hashFunction) {\n    this.hashFunction = hashFunction;\n    this.buffers = [];\n  }\n  Hash.prototype.update = function (buffer) {\n    if (!Buffer.isBuffer(buffer)) {\n      throw new Error(\"hdkey-crypto shim is outdated\");\n    }\n    this.buffers.push(buffer);\n    return this;\n  };\n  Hash.prototype.digest = function (param) {\n    if (param) {\n      throw new Error(\"hdkey-crypto shim is outdated\");\n    }\n    return this.hashFunction(Buffer.concat(this.buffers));\n  };\n  return Hash;\n}();\n// We don't use create-hash here, as it doesn't work well with Rollup\nexports.createHash = function (name) {\n  if (name === \"ripemd160\") {\n    return new Hash(ripemd160_1.ripemd160);\n  }\n  if (name === \"sha256\") {\n    return new Hash(sha256_1.sha256);\n  }\n  throw new Error(\"hdkey-crypto shim is outdated\");\n};","map":{"version":3,"mappings":";;;;;AAAA;AACA;AAEaA,kBAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnCD,mBAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEjD;EAGE,cAA6BC,YAAqC;IAArC,iBAAY,GAAZA,YAAY;IAFjC,YAAO,GAAa,EAAE;EAEuC;EAE9DC,qBAAM,GAAb,UAAcC,MAAc;IAC1B,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACF,MAAM,CAAC,EAAE;MAC5B,MAAM,IAAIG,KAAK,CAAC,+BAA+B,CAAC;;IAGlD,IAAI,CAACC,OAAO,CAACC,IAAI,CAACL,MAAM,CAAC;IAEzB,OAAO,IAAI;EACb,CAAC;EAEMD,qBAAM,GAAb,UAAcO,KAAU;IACtB,IAAIA,KAAK,EAAE;MACT,MAAM,IAAIH,KAAK,CAAC,+BAA+B,CAAC;;IAGlD,OAAO,IAAI,CAACL,YAAY,CAACG,MAAM,CAACM,MAAM,CAAC,IAAI,CAACH,OAAO,CAAC,CAAC;EACvD,CAAC;EACH,WAAC;AAAD,CAAC,EAtBD;AAwBA;AACaR,kBAAU,GAAG,UAACY,IAAY;EACrC,IAAIA,IAAI,KAAK,WAAW,EAAE;IACxB,OAAO,IAAIT,IAAI,CAACU,qBAAS,CAAC;;EAG5B,IAAID,IAAI,KAAK,QAAQ,EAAE;IACrB,OAAO,IAAIT,IAAI,CAACW,eAAM,CAAC;;EAGzB,MAAM,IAAIP,KAAK,CAAC,+BAA+B,CAAC;AAClD,CAAC","names":["exports","require","hashFunction","Hash","buffer","Buffer","isBuffer","Error","buffers","push","param","concat","name","ripemd160_1","sha256_1"],"sources":["/Users/zhangyuanyi/Downloads/Wallet/walletdemo/node_modules/ethereum-cryptography/src/pure/shims/hdkey-crypto.ts"],"sourcesContent":["import { ripemd160 } from \"../ripemd160\";\nimport { sha256 } from \"../sha256\";\n\nexport const createHmac = require(\"create-hmac\");\nexport const randomBytes = require(\"randombytes\");\n\nclass Hash {\n  private buffers: Buffer[] = [];\n\n  constructor(private readonly hashFunction: (msg: Buffer) => Buffer) {}\n\n  public update(buffer: Buffer): this {\n    if (!Buffer.isBuffer(buffer)) {\n      throw new Error(\"hdkey-crypto shim is outdated\");\n    }\n\n    this.buffers.push(buffer);\n\n    return this;\n  }\n\n  public digest(param: any): Buffer {\n    if (param) {\n      throw new Error(\"hdkey-crypto shim is outdated\");\n    }\n\n    return this.hashFunction(Buffer.concat(this.buffers));\n  }\n}\n\n// We don't use create-hash here, as it doesn't work well with Rollup\nexport const createHash = (name: string) => {\n  if (name === \"ripemd160\") {\n    return new Hash(ripemd160);\n  }\n\n  if (name === \"sha256\") {\n    return new Hash(sha256);\n  }\n\n  throw new Error(\"hdkey-crypto shim is outdated\");\n};\n"]},"metadata":{},"sourceType":"script"}